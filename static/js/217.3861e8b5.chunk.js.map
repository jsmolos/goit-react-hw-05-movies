{"version":3,"file":"static/js/217.3861e8b5.chunk.js","mappings":"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","sources":["api/api.js","components/CastListItem/CastListItem.jsx","components/Cast/CastList.jsx"],"sourcesContent":["import axios from 'axios';\n\nconst API_KEY = '99b8738aa775f3085ac0a8a731554e22';\n\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\naxios.defaults.params = {\n  api_key: API_KEY,\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(`trending/movie/day`);\n  return response.data.results;\n};\n\nexport const fetchMovieByQuery = async movieName => {\n  const response = await axios.get(`search/movie?query=${movieName}`);\n  return response.data.results;\n};\n\nexport const fetchMovieDetails = async movieId => {\n  const response = await axios.get(`movie/${movieId}`);\n  console.log('response from api', response);\n  return response.data;\n};\n\nexport const fetchMovieCast = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/credits`);\n    return response.data.cast;\n  } catch (error) {\n    console.error('Error fetching movie cast:', error);\n    throw error; \n  }\n};\n\nexport const fetchMovieReviews = async movieId => {\n  try {\n    const response = await axios.get(`movie/${movieId}/reviews`);\n    return response.data.results;\n  } catch (error) {\n    console.error('Error fetching movie reviews:', error);\n    throw error; \n  }\n};\n\n\n","import PropTypes from 'prop-types';\n\nexport const CastListItem = ({ profilePath, originalName, name }) => {\n  return (\n    <li>\n      <img\n        width=\"200\"\n        height=\"300\"\n        src={\n          profilePath\n            ? `https://image.tmdb.org/t/p/w300${profilePath}`\n            : `https://fakeimg.pl/600x400?text=No+Image+Available`\n        }\n        alt={originalName}\n      />\n      <p>{name}</p>\n    </li>\n  );\n};\n\nCastListItem.propTypes = {\n  profilePath: PropTypes.oneOfType([PropTypes.string, PropTypes.object]),\n  originalName: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n","import { useEffect, useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { fetchMovieCast } from 'api/api';\nimport { CastListItem } from 'components/CastListItem/CastListItem';\n\nconst CastList = () => {\n  const { movieId } = useParams();\n  const [cast, setCast] = useState([]);\n  const [loading, setLoading] = useState(true);\n\n  useEffect(() => {\n    const fetchCast = async () => {\n      try {\n        const response = await fetchMovieCast(movieId);\n        setCast(response);\n        setLoading(false);\n      } catch (error) {\n        console.error(error);\n      }\n    };\n  \n    fetchCast();\n  }, [movieId]);\n\n  return (\n    <>\n      {loading ? (\n        <div>Loading cast...</div>\n      ) : cast.length !== 0 ? (\n        <div>\n          <h2>Movie Cast</h2>\n          <ul>\n            {cast.map(({ id, profile_path, original_name, name }) => (\n              <CastListItem\n                key={id}\n                id={id}\n                profilePath={profile_path}\n                originalName={original_name}\n                name={name}\n              />\n            ))}\n          </ul>\n        </div>\n      ) : (\n        <div>We don't have any cast for this movie.</div>\n      )}\n    </>\n  );\n};\n\nexport default CastList;\n"],"names":["axios","api_key","fetchTrendingMovies","_ref","_asyncToGenerator","_regeneratorRuntime","_callee","response","_context","prev","next","sent","abrupt","data","results","stop","apply","arguments","fetchMovieByQuery","_ref2","_callee2","movieName","_context2","concat","_x","fetchMovieDetails","_ref3","_callee3","movieId","_context3","console","log","_x2","fetchMovieCast","_ref4","_callee4","_context4","cast","t0","error","_x3","CastListItem","profilePath","originalName","name","_jsxs","children","_jsx","width","height","src","alt","useParams","_useState","useState","_useState2","_slicedToArray","setCast","_useState3","_useState4","loading","setLoading","useEffect","fetchCast","_Fragment","length","map","id","profile_path","original_name"],"sourceRoot":""}